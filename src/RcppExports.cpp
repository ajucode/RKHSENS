// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// dst_weighted
double dst_weighted(const NumericVector& x, const NumericVector& y, const NumericVector& w, const NumericVector& p);
RcppExport SEXP RKHSENS_dst_weighted(SEXP xSEXP, SEXP ySEXP, SEXP wSEXP, SEXP pSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP );
        Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP );
        Rcpp::traits::input_parameter< const NumericVector& >::type w(wSEXP );
        Rcpp::traits::input_parameter< const NumericVector& >::type p(pSEXP );
        double __result = dst_weighted(x, y, w, p);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// dst
double dst(const NumericVector& x, const NumericVector& y);
RcppExport SEXP RKHSENS_dst(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP );
        Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP );
        double __result = dst(x, y);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// kf_lin
double kf_lin(const double& h, const double& alpha = 1.0);
RcppExport SEXP RKHSENS_kf_lin(SEXP hSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const double& >::type h(hSEXP );
        Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP );
        double __result = kf_lin(h, alpha);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// kf_sqr
double kf_sqr(const double& h, const double& alpha = 1.0);
RcppExport SEXP RKHSENS_kf_sqr(SEXP hSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const double& >::type h(hSEXP );
        Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP );
        double __result = kf_sqr(h, alpha);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// kf_tri
double kf_tri(const double& h, const double& c = 1.0, const double& alpha = 1.0);
RcppExport SEXP RKHSENS_kf_tri(SEXP hSEXP, SEXP cSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const double& >::type h(hSEXP );
        Rcpp::traits::input_parameter< const double& >::type c(cSEXP );
        Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP );
        double __result = kf_tri(h, c, alpha);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// kf_exp
double kf_exp(const double& h, const double& sigma = 1.0, const double& theta = 1.0);
RcppExport SEXP RKHSENS_kf_exp(SEXP hSEXP, SEXP sigmaSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const double& >::type h(hSEXP );
        Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP );
        Rcpp::traits::input_parameter< const double& >::type theta(thetaSEXP );
        double __result = kf_exp(h, sigma, theta);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// kf_sqexp
double kf_sqexp(const double& h, const double& sigma = 1.0, const double& theta = 1.0);
RcppExport SEXP RKHSENS_kf_sqexp(SEXP hSEXP, SEXP sigmaSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const double& >::type h(hSEXP );
        Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP );
        Rcpp::traits::input_parameter< const double& >::type theta(thetaSEXP );
        double __result = kf_sqexp(h, sigma, theta);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// kf_matern
double kf_matern(const double& h, const double& v = 2.0, const double& sigma = 1.0, const double& theta = 1.0);
RcppExport SEXP RKHSENS_kf_matern(SEXP hSEXP, SEXP vSEXP, SEXP sigmaSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const double& >::type h(hSEXP );
        Rcpp::traits::input_parameter< const double& >::type v(vSEXP );
        Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP );
        Rcpp::traits::input_parameter< const double& >::type theta(thetaSEXP );
        double __result = kf_matern(h, v, sigma, theta);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// kf_multilog
double kf_multilog(const double& h, const double& R = 1.0);
RcppExport SEXP RKHSENS_kf_multilog(SEXP hSEXP, SEXP RSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const double& >::type h(hSEXP );
        Rcpp::traits::input_parameter< const double& >::type R(RSEXP );
        double __result = kf_multilog(h, R);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// kf_cubspline
double kf_cubspline(const double& h, const double& R = 1.0);
RcppExport SEXP RKHSENS_kf_cubspline(SEXP hSEXP, SEXP RSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const double& >::type h(hSEXP );
        Rcpp::traits::input_parameter< const double& >::type R(RSEXP );
        double __result = kf_cubspline(h, R);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// kf_tpspline
double kf_tpspline(const double& h, const double& R = 1.0);
RcppExport SEXP RKHSENS_kf_tpspline(SEXP hSEXP, SEXP RSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const double& >::type h(hSEXP );
        Rcpp::traits::input_parameter< const double& >::type R(RSEXP );
        double __result = kf_tpspline(h, R);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// kf_mix
double kf_mix(const double& h, const double& sigma = 1.0, const double& theta = 1.0);
RcppExport SEXP RKHSENS_kf_mix(SEXP hSEXP, SEXP sigmaSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const double& >::type h(hSEXP );
        Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP );
        Rcpp::traits::input_parameter< const double& >::type theta(thetaSEXP );
        double __result = kf_mix(h, sigma, theta);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
