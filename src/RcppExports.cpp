// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// distwRKH
double distwRKH(const NumericVector x, const NumericVector y, const NumericVector w, const NumericVector p);
RcppExport SEXP RKHSENS_distwRKH(SEXP xSEXP, SEXP ySEXP, SEXP wSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type p(pSEXP);
    __result = Rcpp::wrap(distwRKH(x, y, w, p));
    return __result;
END_RCPP
}
// distRKH
double distRKH(const NumericVector x, const NumericVector y);
RcppExport SEXP RKHSENS_distRKH(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP);
    __result = Rcpp::wrap(distRKH(x, y));
    return __result;
END_RCPP
}
// integralRKH
List integralRKH(List Kernels);
RcppExport SEXP RKHSENS_integralRKH(SEXP KernelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< List >::type Kernels(KernelsSEXP);
    __result = Rcpp::wrap(integralRKH(Kernels));
    return __result;
END_RCPP
}
// evalKernRKH
List evalKernRKH(List Kernels, List Integral);
RcppExport SEXP RKHSENS_evalKernRKH(SEXP KernelsSEXP, SEXP IntegralSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< List >::type Kernels(KernelsSEXP);
    Rcpp::traits::input_parameter< List >::type Integral(IntegralSEXP);
    __result = Rcpp::wrap(evalKernRKH(Kernels, Integral));
    return __result;
END_RCPP
}
// klinRKH
double klinRKH(const double& h, const double& alpha);
RcppExport SEXP RKHSENS_klinRKH(SEXP hSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    __result = Rcpp::wrap(klinRKH(h, alpha));
    return __result;
END_RCPP
}
// ksqrRKH
double ksqrRKH(const double& h, const double& alpha);
RcppExport SEXP RKHSENS_ksqrRKH(SEXP hSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    __result = Rcpp::wrap(ksqrRKH(h, alpha));
    return __result;
END_RCPP
}
// ktriRKH
double ktriRKH(const double& h, const double& c, const double& alpha);
RcppExport SEXP RKHSENS_ktriRKH(SEXP hSEXP, SEXP cSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const double& >::type c(cSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    __result = Rcpp::wrap(ktriRKH(h, c, alpha));
    return __result;
END_RCPP
}
// kexpRKH
double kexpRKH(const double& h, const double& sigma, const double& theta);
RcppExport SEXP RKHSENS_kexpRKH(SEXP hSEXP, SEXP sigmaSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double& >::type theta(thetaSEXP);
    __result = Rcpp::wrap(kexpRKH(h, sigma, theta));
    return __result;
END_RCPP
}
// ksqexpRKH
double ksqexpRKH(const double& h, const double& sigma, const double& theta);
RcppExport SEXP RKHSENS_ksqexpRKH(SEXP hSEXP, SEXP sigmaSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double& >::type theta(thetaSEXP);
    __result = Rcpp::wrap(ksqexpRKH(h, sigma, theta));
    return __result;
END_RCPP
}
// kmaternRKH
double kmaternRKH(const double& h, const double& v, const double& sigma, const double& theta);
RcppExport SEXP RKHSENS_kmaternRKH(SEXP hSEXP, SEXP vSEXP, SEXP sigmaSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const double& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double& >::type theta(thetaSEXP);
    __result = Rcpp::wrap(kmaternRKH(h, v, sigma, theta));
    return __result;
END_RCPP
}
// kmultilogRKH
double kmultilogRKH(const double& h, const double& R);
RcppExport SEXP RKHSENS_kmultilogRKH(SEXP hSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const double& >::type R(RSEXP);
    __result = Rcpp::wrap(kmultilogRKH(h, R));
    return __result;
END_RCPP
}
// kcubsplineRKH
double kcubsplineRKH(const double& h, const double& R);
RcppExport SEXP RKHSENS_kcubsplineRKH(SEXP hSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const double& >::type R(RSEXP);
    __result = Rcpp::wrap(kcubsplineRKH(h, R));
    return __result;
END_RCPP
}
// ktpsplineRKH
double ktpsplineRKH(const double& h, const double& R);
RcppExport SEXP RKHSENS_ktpsplineRKH(SEXP hSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const double& >::type R(RSEXP);
    __result = Rcpp::wrap(ktpsplineRKH(h, R));
    return __result;
END_RCPP
}
// kmixRKH
double kmixRKH(const double& h, const double& sigma, const double& theta);
RcppExport SEXP RKHSENS_kmixRKH(SEXP hSEXP, SEXP sigmaSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double& >::type theta(thetaSEXP);
    __result = Rcpp::wrap(kmixRKH(h, sigma, theta));
    return __result;
END_RCPP
}
// krigingSimpleRKH
List krigingSimpleRKH(NumericMatrix Z, NumericMatrix X, NumericMatrix x0, Function k);
RcppExport SEXP RKHSENS_krigingSimpleRKH(SEXP ZSEXP, SEXP XSEXP, SEXP x0SEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< Function >::type k(kSEXP);
    __result = Rcpp::wrap(krigingSimpleRKH(Z, X, x0, k));
    return __result;
END_RCPP
}
